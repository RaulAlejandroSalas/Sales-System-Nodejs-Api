{"version":3,"sources":["../../src/middlewares/auth.js"],"names":["verifyUser","req","res","next","headers","token","status","send","message","tokenService","decode","resp","rol","verifyAdmin","verifyGrocer","verifySeller"],"mappings":"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","file":"auth.js","sourcesContent":["import tokenService from '../services/token'\n\nexport default{\n    verifyUser: async (req,res,next)=>{\n        if(!req.headers.token){\n            return res.status(404).send({message: 'Not Token'})\n        }\n        const resp = await tokenService.decode(req.headers.token)\n        if(resp.rol == 'ADMIN' || resp.rol == 'SELLER' || resp.rol == 'GROCER'){\n            next()\n        }else{\n            return res.status(403).send({\n                message: 'Not Authorized'\n            })\n        }\n    },\n    verifyAdmin: async (req,res,next)=>{\n            if(!req.headers.token){\n                return res.status(404).send({message: 'Not Token'})\n            }\n            const resp = await tokenService.decode(req.headers.token)\n            if(resp.rol == 'ADMIN'){\n                next()\n            }else{\n                return res.status(403).send({\n                    message: 'Not Authorized'\n                })\n            }\n      \n    },\n    verifyGrocer: async (req,res,next)=>{\n            if(!req.headers.token){\n                return res.status(404).send({message: 'Not Token'})\n            }\n            const resp = await tokenService.decode(req.headers.token)\n            if(resp.rol == 'ADMIN' || resp.rol == 'GROCER'){\n                next()\n            }else{\n                return res.status(403).send({\n                    message: 'Not Authorized'\n                })\n            }\n    },\n    verifySeller: async (req,res,next)=>{\n       \n            if(!req.headers.token){\n                return res.status(404).send({message: 'Not Token'})\n            }\n            const resp = await tokenService.decode(req.headers.token)\n            if(resp.rol == 'ADMIN' || resp.rol == 'SELLER'){\n                next()\n            }else{\n                return res.status(403).send({\n                    message: 'Not Authorized'\n                })\n            }\n    }\n}"]}