{"version":3,"sources":["../../src/services/token.js"],"names":["token","__id","jwt","decode","_id","models","User","findOne","state","user","_token","sign","expiresIn","rol","checkToken","encode","id","verify"],"mappings":";;;;;;;uEAGA,iBAA0BA,KAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQC,4BADR,GACe,IADf;AAAA;AAAA;AAAA,+BAG2BC,uBAAIC,MAAJ,CAAWH,KAAX,CAH3B;;AAAA;AAAA;AAGeI,2BAHf,SAGeA,GAHf;;AAIQH,+BAAOG,GAAP;AAJR;AAAA;;AAAA;AAAA;AAAA;AAAA,yDAMe,KANf;;AAAA;AAAA;AAAA,+BAQuBC,iBAAOC,IAAP,CAAYC,OAAZ,CAAoB,EAACH,KAAIH,IAAL,EAAUO,OAAM,CAAhB,EAApB,CARvB;;AAAA;AAQUC,4BARV;;AAAA,6BASOA,IATP;AAAA;AAAA;AAAA;;AAUcC,8BAVd,GAUuBR,uBAAIS,IAAJ,CAAS,EAACP,KAAIH,IAAL,EAAT,EAAoB,QAApB,EAA6B,EAACW,WAAU,IAAX,EAA7B,CAVvB;AAAA,yDAWe,EAACZ,OAAMU,MAAP,EAAcG,KAAIJ,KAAKI,GAAvB,EAXf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,U;;;;;AAHf;;;;AACA;;;;;;;;kBAkBc;AACVC;AAAA,4EAAQ,kBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA,8DACGd,uBAAIS,IAAJ,CAAS,EAACP,KAAIY,EAAL,EAAT,EAAkB,QAAlB,EAA2B,EAACJ,WAAW,IAAZ,EAA3B,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAR;;AAAA;AAAA;AAAA;AAAA,OADU;AAIVT;AAAA,4EAAQ,kBAAMH,KAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEoBE,uBAAIe,MAAJ,CAAWjB,KAAX,EAAiB,QAAjB,CAFpB;;AAAA;AAAA;AAEOI,+BAFP,SAEOA,GAFP;AAAA;AAAA,mCAGmBC,iBAAOC,IAAP,CAAYC,OAAZ,CAAoB,EAACH,QAAD,EAAKI,OAAM,CAAX,EAApB,CAHnB;;AAAA;AAGMC,gCAHN;;AAAA,iCAIGA,IAJH;AAAA;AAAA;AAAA;;AAAA,8DAKWA,IALX;;AAAA;AAAA,8DAOW,KAPX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mCAUaK,WAAWd,KAAX,CAVb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAR;;AAAA;AAAA;AAAA;AAAA;AAJU,C","file":"token.js","sourcesContent":["import jwt from 'jsonwebtoken'\nimport models from '../models'\n\nasync function checkToken(token){\n    let __id = null\n    try {\n        const {_id}= await jwt.decode(token)\n        __id = _id;\n    } catch (error) {\n        return false\n    }\n    const user = await models.User.findOne({_id:__id,state:1})\n    if(user){\n        const _token = jwt.sign({_id:__id},'secret',{expiresIn:'1d'})\n        return {token:_token,rol:user.rol}\n    }\n}\n\n\nexport default{\n    encode: async(id)=>{\n        return jwt.sign({_id:id},'secret',{expiresIn: '1d'})\n    },\n    decode: async(token)=>{\n        try {\n            const {_id} = await jwt.verify(token,'secret')\n            const user = await models.User.findOne({_id,state:1})\n            if(user){\n                return user;\n            }else{\n                return false;\n            }\n        } catch (error) {\n            return await checkToken(token)\n        }\n    }\n}"]}