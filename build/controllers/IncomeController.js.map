{"version":3,"sources":["../../src/controllers/IncomeController.js"],"names":["idArticle","quantity","models","Article","findOne","_id","stock","newStock","parseInt","findByIdAndUpdate","incrementStock","decrementStock","add","req","res","next","Income","create","body","resp","details","map","x","status","send","message","query","findById","id","populate","name","list","pattern","filter","find","$or","RegExp","sort","getIncomesLast12Months","aggregate","$group","month","$month","year","$year","total","$sum","number","$sort","limit","response","json","activate","state","deactivate"],"mappings":";;;;;;;uEAEA,iBAA8BA,SAA9B,EAAwCC,QAAxC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACwBC,iBAAOC,OAAP,CAAeC,OAAf,CAAuB,EAACC,KAAIL,SAAL,EAAvB,CADxB;;AAAA;AAAA;AACSM,6BADT,SACSA,KADT;AAEQC,gCAFR,GAEmBC,SAASF,KAAT,IAAgBE,SAASP,QAAT,CAFnC;AAAA;AAAA,+BAGiBC,iBAAOC,OAAP,CAAeM,iBAAf,CAAiC,EAACJ,KAAIL,SAAL,EAAjC,EAAiD,EAACM,OAAMC,QAAP,EAAjD,CAHjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeG,c;;;;;;wEAMf,kBAA8BV,SAA9B,EAAwCC,QAAxC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACwBC,iBAAOC,OAAP,CAAeC,OAAf,CAAuB,EAACC,KAAIL,SAAL,EAAvB,CADxB;;AAAA;AAAA;AACSM,6BADT,SACSA,KADT;AAEQC,gCAFR,GAEmBC,SAASF,KAAT,IAAgBE,SAASP,QAAT,CAFnC;AAAA;AAAA,+BAGiBC,iBAAOC,OAAP,CAAeM,iBAAf,CAAiC,EAACJ,KAAIL,SAAL,EAAjC,EAAiD,EAACM,OAAMC,QAAP,EAAjD,CAHjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeI,c;;;;;AARf;;;;;;;;kBAec;AACVC;AAAA,4EAAK,kBAAOC,GAAP,EAAWC,GAAX,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEsBb,iBAAOc,MAAP,CAAcC,MAAd,CAAqBJ,IAAIK,IAAzB,CAFtB;;AAAA;AAESC,gCAFT;;AAGG;AACIC,mCAJP,GAIiBP,IAAIK,IAAJ,CAASE,OAJ1B;;AAKGA,oCAAQC,GAAR,CAAY;AAAA,uCAAGX,eAAeY,EAAEjB,GAAjB,EAAqBiB,EAAErB,QAAvB,CAAH;AAAA,6BAAZ;AACAa,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,IAArB;AANH;AAAA;;AAAA;AAAA;AAAA;;AAQGL,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,sFAAoDZ,IAAIK;AADvC,6BAArB;AAGAH;;AAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAL;;AAAA;AAAA;AAAA;AAAA,OADU;AAeVW;AAAA,4EAAM,kBAAOb,GAAP,EAAWC,GAAX,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEqBb,iBAAOc,MAAP,CAAcW,QAAd,CAAuB,EAACtB,KAAIQ,IAAIa,KAAJ,CAAUE,EAAf,EAAvB,EAA2CC,QAA3C,CAAoD,OAApD,EAA4D,EAACC,MAAK,CAAN,EAA5D,EAAsED,QAAtE,CAA+E,SAA/E,EAAyF,EAACC,MAAK,CAAN,EAAzF,CAFrB;;AAAA;AAEQX,gCAFR;;AAGE,gCAAG,CAACA,IAAJ,EAAS;AACLL,oCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,mDAAiDZ,IAAIa,KAAJ,CAAUE,EAA5D,EAArB;AACH,6BAFD,MAEK;AACDd,oCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,IAArB;AACH;AAPH;AAAA;;AAAA;AAAA;AAAA;;AASEL,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,wEAAsCZ,IAAIa,KAAJ,CAAUE;AAD/B,6BAArB;AAGAb;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAN;;AAAA;AAAA;AAAA;AAAA,OAfU;AA8BVgB;AAAA,4EAAK,kBAAOlB,GAAP,EAAWC,GAAX,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOiB,mCAFP,GAEiBnB,IAAIa,KAAJ,CAAUO,MAF3B;AAAA;AAAA,mCAGsB/B,iBAAOc,MAAP,CAAckB,IAAd,CAAmB,EAACC,KAAI,CAAC,EAAC,eAAe,IAAIC,MAAJ,CAAWJ,OAAX,EAAmB,GAAnB,CAAhB,EAAD,EAA0C,EAAC,iBAAiB,IAAII,MAAJ,CAAWJ,OAAX,EAAmB,GAAnB,CAAlB,EAA1C,CAAL,EAAnB,EACcH,QADd,CACuB,OADvB,EAC+B,EAACC,MAAK,CAAN,EAD/B,EAEcD,QAFd,CAEuB,SAFvB,EAEiC,EAACC,MAAK,CAAN,EAFjC,EAGcO,IAHd,CAGmB,EAAC,aAAY,CAAC,CAAd,EAHnB,CAHtB;;AAAA;AAGSlB,gCAHT;;AAOGL,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,IAArB;AAPH;AAAA;;AAAA;AAAA;AAAA;;AASGL,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC;AADiB,6BAArB;AAGAV;;AAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAL;;AAAA;AAAA;AAAA;AAAA,OA9BU;AA6CVuB;AAAA,4EAAwB,kBAAMzB,GAAN,EAAUC,GAAV,EAAcC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEOb,iBAAOc,MAAP,CAAcuB,SAAd,CACnB,CACI;AACIC,wCAAO;AACHnC,yCAAI;AACAoC,+CAAM,EAAEC,QAAQ,YAAV,EADN;AAEAC,8CAAM,EAAEC,OAAO,YAAT;AAFN,qCADD;AAKHC,2CAAO,EAAEC,MAAK,QAAP,EALJ;AAMHC,4CAAQ,EAAED,MAAK,CAAP;AANL;AADX,6BADJ,EAWI;AACIE,uCAAM;AACF,gDAAW,CAAC,CADV,EACY,aAAY,CAAC;AADzB;AADV,6BAXJ,CADmB,EAkBrBC,KAlBqB,CAkBf,EAlBe,CAFP;;AAAA;AAEVC,oCAFU;;AAqBhBpC,gCAAIS,MAAJ,CAAW,GAAX,EAAgB4B,IAAhB,CAAqBD,QAArB;AArBgB;AAAA;;AAAA;AAAA;AAAA;;AAuBhBpC,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,+FAA6DZ,IAAIK,IAAJ,CAASU;AADrD,6BAArB;AAGAb;;AA1BgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAxB;;AAAA;AAAA;AAAA;AAAA,OA7CU;AA0EVqC;AAAA,4EAAS,kBAAOvC,GAAP,EAAWC,GAAX,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEkBb,iBAAOc,MAAP,CAAcP,iBAAd,CAAgC,EAACJ,KAAIQ,IAAIK,IAAJ,CAASU,EAAd,EAAhC,EAAkD,EAACyB,OAAM,CAAP,EAAlD,CAFlB;;AAAA;AAEKlC,gCAFL;AAGGC,mCAHH,GAGaD,KAAKC,OAHlB;;AAIDA,oCAAQC,GAAR,CAAY;AAAA,uCAAGX,eAAeY,EAAEjB,GAAjB,EAAqBiB,EAAErB,QAAvB,CAAH;AAAA,6BAAZ;AACAa,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,IAArB;AALC;AAAA;;AAAA;AAAA;AAAA;;AAODL,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,iFAA+CZ,IAAIK,IAAJ,CAASU;AADvC,6BAArB;AAGAb;;AAVC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAT;;AAAA;AAAA;AAAA;AAAA,OA1EU;AAuFVuC;AAAA,6EAAW,kBAAOzC,GAAP,EAAWC,GAAX,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEgBb,iBAAOc,MAAP,CAAcP,iBAAd,CAAgC,EAACJ,KAAIQ,IAAIK,IAAJ,CAASU,EAAd,EAAhC,EAAkD,EAACyB,OAAM,CAAP,EAAlD,CAFhB;;AAAA;AAEGlC,gCAFH;AAGCC,mCAHD,GAGWD,KAAKC,OAHhB;;AAIHA,oCAAQC,GAAR,CAAY;AAAA,uCAAGV,eAAeW,EAAEjB,GAAjB,EAAqBiB,EAAErB,QAAvB,CAAH;AAAA,6BAAZ;AACAa,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,IAArB;AALG;AAAA;;AAAA;AAAA;AAAA;;AAOHL,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,mFAAiDZ,IAAIK,IAAJ,CAASU;AADzC,6BAArB;AAGAb;;AAVG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAX;;AAAA;AAAA;AAAA;AAAA;AAvFU,C","file":"IncomeController.js","sourcesContent":["import models from '../models';\n\nasync function incrementStock(idArticle,quantity){\n    let {stock} = await models.Article.findOne({_id:idArticle});\n    let newStock = parseInt(stock)+parseInt(quantity);\n    return await models.Article.findByIdAndUpdate({_id:idArticle},{stock:newStock})\n}\n\nasync function decrementStock(idArticle,quantity){\n    let {stock} = await models.Article.findOne({_id:idArticle});\n    let newStock = parseInt(stock)-parseInt(quantity);\n    return await models.Article.findByIdAndUpdate({_id:idArticle},{stock:newStock})\n}\n\n\nexport default{\n    add: async (req,res,next)=>{\n        try {\n            const resp = await models.Income.create(req.body);\n            //Updating Stock Articles\n            let details = req.body.details\n            details.map(x=>incrementStock(x._id,x.quantity))\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Inserting a new Income with Body: ${req.body}`\n            })\n            next(error);            \n        }\n    },\n    query:async (req,res,next)=>{\n        try {\n            const resp = await models.Income.findById({_id:req.query.id}).populate('users',{name:1}).populate('persons',{name:1}) \n            if(!resp){\n                res.status(404).send({message: `The Income not exist with the Query: ${req.query.id}`})\n            }else{\n                res.status(200).send(resp);\n            }\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Executing the Query ${req.query.id}`\n            })\n            next(error);            \n        }\n    },\n    list:async (req,res,next)=>{\n        try {\n            let pattern = req.query.filter;\n            const resp = await models.Income.find({$or:[{'num_receipt': new RegExp(pattern,'i')},{'serie_receipt': new RegExp(pattern,'i')}]})\n                                            .populate('users',{name:1})\n                                            .populate('persons',{name:1})  \n                                            .sort({'createdAt':-1})\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Not Exists Incomes in the Database...`\n            })\n            next(error);            \n        }  \n    },\n    getIncomesLast12Months: async(req,res,next)=>{\n        try {\n            const response = await models.Income.aggregate(\n                [\n                    {\n                        $group:{\n                            _id:{ \n                                month:{ $month: \"$createdAt\"},\n                                year: { $year: \"$createdAt\"}\n                            }, \n                            total: { $sum:\"$total\"},\n                            number: { $sum:1}\n                        }\n                    },\n                    {\n                        $sort:{\n                            \"_id.year\":-1,\"_id.month\":-1\n                        }\n                    }\n                ]\n            ).limit(12)\n            res.status(200).json(response)\n        } catch (error) {\n            res.status(500).send({\n                message: `Error GettingSalesLast12Months a Income with id: ${req.body.id}`\n            })\n            next(error);            \n        }   \n    },\n    activate:async (req,res,next)=>{\n        try {\n            const resp = await models.Income.findByIdAndUpdate({_id:req.body.id},{state:1});\n            let details = resp.details\n            details.map(x=>incrementStock(x._id,x.quantity))\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Activating a Income with id: ${req.body.id}`\n            })\n            next(error);            \n        }   \n    },\n    deactivate:async (req,res,next)=>{\n        try {\n            const resp = await models.Income.findByIdAndUpdate({_id:req.body.id},{state:0});\n            let details = resp.details\n            details.map(x=>decrementStock(x._id,x.quantity))\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Deactivating a Income with id: ${req.body.id}`\n            })\n            next(error);            \n        }   \n    }\n}"]}