{"version":3,"sources":["../../src/controllers/PersonController.js"],"names":["add","req","res","next","models","Person","create","body","resp","status","send","message","query","findById","_id","id","console","log","list","pattern","filter","find","$or","RegExp","createdAt","sort","listClient","listProvider","update","findByIdAndUpdate","type_person","name","type_document","num_document","address","phone","email","remove","findOneAndRemove","activate","state","deactivate"],"mappings":"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","file":"PersonController.js","sourcesContent":["import models from '../models';\n\nexport default{\n    add: async (req,res,next)=>{\n        try {\n            const resp = await models.Person.create(req.body);\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Inserting a new Person with Body: ${req.body}`\n            })\n            next(error);            \n        }\n    },\n    query:async (req,res,next)=>{\n        try {\n            const resp = await models.Person.findById({_id:req.query.id});\n            console.log(resp);\n            if(!resp){\n                res.status(404).send({message: `The Person not exist with the Query: ${req.query.id}`})\n            }else{\n                res.status(200).send(resp);\n            }\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Executing the Query ${req.query.id}`\n            })\n            next(error);            \n        }\n    },\n    list:async (req,res,next)=>{\n        try {\n            let pattern = req.query.filter;\n            const resp = await models.Person.find({$or:[\n                                                    {'name': new RegExp(pattern,'i')},\n                                                    {'email': new RegExp(pattern,'i')}\n                                                ]},{createdAt:0})\n                                              .sort({'createdAt':-1})\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Not Exists Categories in the Database...`\n            })\n            next(error);            \n        }  \n    },\n    listClient: async (req,res,next)=>{\n        try {\n            let pattern = req.query.filter;\n            const resp = await models.Person.find({$or:[\n                                                    {'name': new RegExp(pattern,'i')},\n                                                    {'email': new RegExp(pattern,'i')}\n                                                ],'type_person':'CLIENT'},{createdAt:0})\n                                              .sort({'createdAt':-1})\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Not Exists Categories in the Database...`\n            })\n            next(error);            \n        }  \n    },\n    listProvider: async (req,res,next)=>{\n        try {\n            let pattern = req.query.filter;\n            const resp = await models.Person.find({$or:[\n                                                    {'name': new RegExp(pattern,'i')},\n                                                    {'email': new RegExp(pattern,'i')}\n                                                ],'type_person':'PROVIDER'},{createdAt:0})\n                                              .sort({'createdAt':-1})\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Not Exists Categories in the Database...`\n            })\n            next(error);            \n        }  \n    },\n    update:async (req,res,next)=>{\n        try {\n            const resp = await models.Person.findByIdAndUpdate({_id:req.body.id},\n                {\n                    type_person:req.body.type_person,\n                    name:req.body.name,\n                    type_document: req.body.type_document,\n                    num_document: req.body.num_document,\n                    address: req.body.address,\n                    phone: req.body.phone,\n                    email: req.body.email\n                })\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Updating a User with id:  ${req.body.id}`\n            })\n            next(error);            \n        }\n    },\n    remove:async (req,res,next)=>{\n        try {\n            const resp = await models.Person.findOneAndRemove({_id:req.body.id})\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Deleting a Person with id: ${req.body.id}`\n            })\n            next(error);            \n        }              \n    },\n    activate:async (req,res,next)=>{\n        try {\n            const resp = await models.Person.findByIdAndUpdate({_id:req.body.id},{state:1});\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Activating a Remove with id: ${req.body.id}`\n            })\n            next(error);            \n        }   \n    },\n    deactivate:async (req,res,next)=>{\n        try {\n            const resp = await models.Person.findByIdAndUpdate({_id:req.body.id},{state:0});\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Deactivating a Person with id: ${req.body.id}`\n            })\n            next(error);            \n        }   \n    }\n}"]}