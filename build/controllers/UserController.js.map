{"version":3,"sources":["../../src/controllers/UserController.js"],"names":["add","req","res","next","bcrypt","hash","body","password","models","User","create","resp","status","send","message","query","findById","_id","id","console","log","list","pattern","filter","find","$or","RegExp","createdAt","sort","update","oldPassword","findOne","reg0","findByIdAndUpdate","rol","name","type_document","num_document","address","phone","email","remove","findOneAndRemove","activate","state","deactivate","login","user","match","compare","tokenService","encode","tokenReturn","json"],"mappings":"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","file":"UserController.js","sourcesContent":["import models from '../models';\nimport bcrypt from 'bcryptjs'\nimport tokenService from '../services/token';\n\nexport default{\n    add: async (req,res,next)=>{\n        try {\n            req.body.password = await bcrypt.hash(req.body.password,10)\n            const resp = await models.User.create(req.body);\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Inserting a new User with Body: ${req.body}`\n            })\n            next(error);            \n        }\n    },\n    query:async (req,res,next)=>{\n        try {\n            const resp = await models.User.findById({_id:req.query.id});\n            console.log(resp);\n            if(!resp){\n                res.status(404).send({message: `The User not exist with the Query: ${req.query.id}`})\n            }else{\n                res.status(200).send(resp);\n            }\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Executing the Query ${req.query.id}`\n            })\n            next(error);            \n        }\n    },\n    list:async (req,res,next)=>{\n        try {\n            let pattern = req.query.filter;\n            const resp = await models.User.find(\n                                                {$or:[\n                                                    {'name': new RegExp(pattern,'i')},\n                                                    {'email': new RegExp(pattern,'i')}\n                                                ]},{createdAt:0})\n                                              .sort({'createdAt':-1})\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Not Exists Categories in the Database...`\n            })\n            next(error);            \n        }  \n    },\n    update:async (req,res,next)=>{\n        try {\n            let oldPassword = req.body.password\n            const reg0 = await models.User.findOne({_id: req.body.id})\n            if(oldPassword!=reg0.password){\n                req.body.password = await bcrypt.hash(req.body.password,10)\n            }\n            const resp = await models.User.findByIdAndUpdate({_id:req.body.id},\n                {\n                    rol:req.body.rol,\n                    name:req.body.name,\n                    type_document: req.body.type_document,\n                    num_document: req.body.num_document,\n                    address: req.body.address,\n                    phone: req.body.phone,\n                    email: req.body.email,\n                    password: req.body.password\n\n                })\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Updating a User with id:  ${req.body.id}`\n            })\n            next(error);            \n        }\n    },\n    remove:async (req,res,next)=>{\n        try {\n            const resp = await models.User.findOneAndRemove({_id:req.body.id})\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Deleting a User with id: ${req.body.id}`\n            })\n            next(error);            \n        }              \n    },\n    activate:async (req,res,next)=>{\n        try {\n            const resp = await models.User.findByIdAndUpdate({_id:req.body.id},{state:1});\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Activating a User with id: ${req.body.id}`\n            })\n            next(error);            \n        }   \n    },\n    deactivate:async (req,res,next)=>{\n        try {\n            const resp = await models.User.findByIdAndUpdate({_id:req.body.id},{state:0});\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Deactivating a User with id: ${req.body.id}`\n            })\n            next(error);            \n        }   \n    },\n\n    login: async (req,res,next)=>{\n        try {\n            let user = await models.User.findOne({email:req.body.email,state:1})\n            if(user){\n                //Compare Password\n                let match = bcrypt.compare(req.body.password, user.password)\n                if(match){\n                    let tokenReturn = await tokenService.encode(user._id)\n                    res.status(200).json({user,tokenReturn})\n                }else{\n                    res.status(404).send({message: `Password Incorrect`})\n                }\n            }else{\n                res.status(404).send({message: `The User with email: ${req.body.email} not exist `})\n            }\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Login a User with email: ${req.body.email}`\n            })\n            next(error);   \n        }\n    }\n}"]}