{"version":3,"sources":["../../src/controllers/CategoryController.js"],"names":["add","req","res","next","models","Category","create","body","resp","status","send","message","query","findById","_id","id","console","log","list","pattern","filter","find","$or","RegExp","createdAt","sort","update","findByIdAndUpdate","name","description","remove","findOneAndRemove","activate","state","deactivate"],"mappings":"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","file":"CategoryController.js","sourcesContent":["import models from '../models';\nexport default{\n    add: async (req,res,next)=>{\n        try {\n            const resp = await models.Category.create(req.body);\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Inserting a new Category with Body: ${req.body}`\n            })\n            next(error);            \n        }\n    },\n    query:async (req,res,next)=>{\n        try {\n            const resp = await models.Category.findById({_id:req.query.id});\n            console.log(resp);\n            if(!resp){\n                res.status(404).send({message: `The Category not exist with the Query: ${req.query.id}`})\n            }else{\n                res.status(200).send(resp);\n            }\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Executing the Query ${req.query.id}`\n            })\n            next(error);            \n        }\n    },\n    list:async (req,res,next)=>{\n        try {\n            let pattern = req.query.filter;\n            const resp = await models.Category.find(\n                                                {$or:[\n                                                    {'name': new RegExp(pattern,'i')},\n                                                    {'description': new RegExp(pattern,'i')}\n                                                ]},{createdAt:0})\n                                              .sort({'createdAt':-1})\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Not Exists Categories in the Database...`\n            })\n            next(error);            \n        }  \n    },\n    update:async (req,res,next)=>{\n        try {\n            const resp = await models.Category.findByIdAndUpdate({_id:req.body.id},{\n                name:req.body.name,\n                description:req.body.description,\n            })\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Updating a  Category with id:  ${req.body.id}`\n            })\n            next(error);            \n        }\n    },\n    remove:async (req,res,next)=>{\n        try {\n            const resp = await models.Category.findOneAndRemove({_id:req.body.id})\n            res.status(200).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Deleting a Category with id: ${req.body.id}`\n            })\n            next(error);            \n        }              \n    },\n    activate:async (req,res,next)=>{\n        try {\n            const resp = await models.Category.findByIdAndUpdate({_id:req.body.id},{state:1});\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Activating a Category with id: ${req.body.id}`\n            })\n            next(error);            \n        }   \n    },\n    deactivate:async (req,res,next)=>{\n        try {\n            const resp = await models.Category.findByIdAndUpdate({_id:req.body.id},{state:0});\n            res.status(201).send(resp);\n        } catch (error) {\n            res.status(500).send({\n                message: `Error Deactivating a Category with id: ${req.body.id}`\n            })\n            next(error);            \n        }   \n    }\n}"]}